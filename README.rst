===================================
LibQiPython - LibQi Python bindings
===================================

This repository contains the official Python bindings of the `LibQi`__, the ``qi``
Python module.

__ LibQi_repo_

Building
========

The libqi-python project requires a compiler that supports C++17 to build.

It is built with CMake >= 3.23.

.. note::
  The CMake project offers several configuration options and exports a set
  of targets when installed. You may refer to the ``CMakeLists.txt`` file
  for more details about available parameters and exported targets.

.. note::
  The procedures described below assume that you have downloaded the project
  sources and that your current working directory is the project sources root
  directory.

Conan
^^^^^

Additionally, libqi-python is available as a Conan 2 project, which means you
can use Conan to fetch dependencies.

You can install and/or upgrade Conan 2 and create a default profile in the
following way:

.. code-block:: console

  # install/upgrade Conan 2
  pip install --upgrade conan~=2
  # create a default profile
  conan profile detect

Install dependencies from Conan and build with CMake
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The procedure to build the project using Conan to fetch dependencies is the
following.

You must first install the project dependencies in Conan.

.. code-block:: console

  conan install . --build=missing -s build_type=Debug

This will generate a build directory containing a configuration with a
toolchain file that allows CMake to find dependencies inside the Conan cache.

You can then invoke CMake directly inside the build configuration directory to
configure and build the project. Fortunately, Conan also generates a CMake
preset that simplifies the process. The name of the preset may differ on
your machine. You may need to find the preset generated by Conan first by
calling:

.. code-block:: console

  cmake --list-presets

Here, we'll assume that the preset is named `conan-linux-x86_64-gcc-debug`.
To start building, you need to configure with CMake and then build:

.. code-block:: console

  cmake --preset conan-linux-x86_64-gcc-debug
  cmake --build --preset conan-linux-x86_64-gcc-debug

You can then invoke tests using CTest_:

.. code-block:: console

  ctest --preset conan-linux-x86_64-gcc-debug --output-on-failure

Finally, you can install the project in the directory of your choice.

The project defines a single install component, the ``Module`` component.

.. code-block:: console

   # "cmake --install" does not support preset sadly.
   cmake --install build/linux-x86_64-gcc-debug
    --component Module --prefix ~/my-libqi-python-install

Wheel (PEP 517)
---------------

You may build this project as a wheel package using PEP 517.

It uses a scikit-build_ backend which interfaces with CMake.

You may need to provide a toolchain file so that CMake finds the required
dependencies, such as a toolchain generated by Conan:

.. code-block:: console

  conan install . --build=missing

You now can use the ``build`` Python module to build the wheel using PEP 517.

.. code-block:: console

  export CMAKE_TOOLCHAIN_FILE=$PWD/build/linux-x86_64-gcc-release/generators/conan_toolchain.cmake
  python -m build

When built that way, the native libraries present in the wheel are most likely incomplete.
You will need to use ``auditwheel`` or ``delocate`` to fix it.

.. code-block:: console

  auditwheel repair --plat manylinux_2_31_x86_64 dist/qi-*.whl
  # The wheel will be by default placed in a `./wheelhouse/` directory.

Crosscompiling
--------------

The project supports cross-compiling as explained in the `CMake manual about
toolchains`__. You may simply set the ``CMAKE_TOOLCHAIN_FILE`` variable to the
path of the CMake file in your toolchain.

__ CMake_toolchains_

.. _LibQi_repo: https://github.com/aldebaran/libqi
.. _scikit-build: https://scikit-build.readthedocs.io/en/latest/
.. _setuptools: https://setuptools.readthedocs.io/en/latest/setuptools.html
.. _CMake_toolchains: https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html
.. _CTest: https://cmake.org/cmake/help/latest/manual/ctest.1.html
